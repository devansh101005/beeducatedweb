// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         Role          @default(STUDENT)
  createdAt    DateTime      @default(now())
  createdExams Exam[]
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

model Student {
  id          String   @id @default(uuid())
  studentId   String   @unique  // Student ID (e.g., "2024CS001")
  name        String
  email       String?  @unique
  phone       String?
  dateOfBirth DateTime // For birthday authentication
  gradeLevel  String   // e.g., "Class 12", "B.Tech 2nd Year"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  examAttempts ExamAttempt[]
}

model StudentApplication {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String
  address    String
  gradeLevel String
  resume     String?
  marksheets String[] // Array of file paths
  idcards    String[] // Array of file paths
  createdAt  DateTime @default(now())
}

model TutorApplication {
  id               Int      @id @default(autoincrement())
  name             String
  email            String
  phone            String
  qualification    String
  subjectExpertise String
  experienceYears  Int
  resume           String?
  idcards          String[] // Array of file paths
  createdAt        DateTime @default(now())
}

model StudyMaterial {
  id         String   @id @default(uuid())
  title      String
  url        String
  category   String // e.g., JEE, NEET, NDA
  classLevel String // e.g., Class-12, Nursery
  createdAt  DateTime @default(now())
}



model OfflineStudent {
  id        String   @id
  phone     String   @unique
  otp       String?
  createdAt DateTime @default(now())
}


model Exam {
  id                 Int       @id @default(autoincrement())
  title              String
  description        String?
  subject            String
  classLevel         String
  duration           Int // minutes
  startTime          DateTime?
  endTime            DateTime?
  totalMarks         Int       @default(0)
  negativeMarking    Float     @default(0) // e.g. 0.25
  randomizeQuestions Boolean   @default(false)
  randomizeOptions   Boolean   @default(false)
  createdBy          String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  questions Question[]
  attempts  ExamAttempt[]
  creator   User       @relation(fields: [createdBy], references: [id]) 
  @@index([createdBy])
  @@index([startTime])
  @@index([endTime])
}

model Question {
  id           Int      @id @default(autoincrement())
  examId       Int
  questionText String
  options      String[] // base order
  correct      Int[] // indices of correct answers (supports multi-correct)
  marks        Int
  difficulty   String?
  explanation  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  exam Exam @relation(fields: [examId], references: [id])

  @@index([examId])
}

enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  GRADED
}

model ExamAttempt {
  id          Int           @id @default(autoincrement())
  examId      Int
  studentId   String
  student     Student @relation(fields: [studentId], references: [id])
  // Persisted randomization + user selections:
  // {
  //   qOrder: [questionId...],
  //   optionOrder: { "<qId>": [shuffled indices...] },
  //   answers: [{ questionId, selected: [indicesInShuffledOrder] }]
  // }
  payload     Json
  score       Float         @default(0)
  startedAt   DateTime      @default(now())
  submittedAt DateTime?
  timeTaken   Int? // seconds
  rank        Int?
  status      AttemptStatus @default(IN_PROGRESS)

  exam    Exam @relation(fields: [examId], references: [id])
  student User @relation(fields: [studentId], references: [id])

  @@unique([examId, studentId, status], map: "uniq_active_attempt_per_exam_student_status")
  @@index([examId])
  @@index([studentId])
  @@index([status])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  message   String
  isActive  Boolean  @default(true)  // Only active announcements are shown
  createdAt DateTime @default(now())
}


